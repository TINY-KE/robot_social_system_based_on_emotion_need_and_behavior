// Generated by gencpp from file interface_sim/need_lists_msg.msg
// DO NOT EDIT!


#ifndef INTERFACE_SIM_MESSAGE_NEED_LISTS_MSG_H
#define INTERFACE_SIM_MESSAGE_NEED_LISTS_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interface_sim
{
template <class ContainerAllocator>
struct need_lists_msg_
{
  typedef need_lists_msg_<ContainerAllocator> Type;

  need_lists_msg_()
    : person()
    , rob_emotion()
    , person_emotion()
    , name()
    , weight(0.0)
    , speech()  {
    }
  need_lists_msg_(const ContainerAllocator& _alloc)
    : person(_alloc)
    , rob_emotion(_alloc)
    , person_emotion(_alloc)
    , name(_alloc)
    , weight(0.0)
    , speech(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _person_type;
  _person_type person;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rob_emotion_type;
  _rob_emotion_type rob_emotion;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _person_emotion_type;
  _person_emotion_type person_emotion;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef double _weight_type;
  _weight_type weight;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _speech_type;
  _speech_type speech;





  typedef boost::shared_ptr< ::interface_sim::need_lists_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interface_sim::need_lists_msg_<ContainerAllocator> const> ConstPtr;

}; // struct need_lists_msg_

typedef ::interface_sim::need_lists_msg_<std::allocator<void> > need_lists_msg;

typedef boost::shared_ptr< ::interface_sim::need_lists_msg > need_lists_msgPtr;
typedef boost::shared_ptr< ::interface_sim::need_lists_msg const> need_lists_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interface_sim::need_lists_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interface_sim::need_lists_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interface_sim::need_lists_msg_<ContainerAllocator1> & lhs, const ::interface_sim::need_lists_msg_<ContainerAllocator2> & rhs)
{
  return lhs.person == rhs.person &&
    lhs.rob_emotion == rhs.rob_emotion &&
    lhs.person_emotion == rhs.person_emotion &&
    lhs.name == rhs.name &&
    lhs.weight == rhs.weight &&
    lhs.speech == rhs.speech;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interface_sim::need_lists_msg_<ContainerAllocator1> & lhs, const ::interface_sim::need_lists_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interface_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::interface_sim::need_lists_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interface_sim::need_lists_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interface_sim::need_lists_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interface_sim::need_lists_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interface_sim::need_lists_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interface_sim::need_lists_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interface_sim::need_lists_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3fdae128c44bcea9ca7d8a10aee1458";
  }

  static const char* value(const ::interface_sim::need_lists_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3fdae128c44bceaULL;
  static const uint64_t static_value2 = 0x9ca7d8a10aee1458ULL;
};

template<class ContainerAllocator>
struct DataType< ::interface_sim::need_lists_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interface_sim/need_lists_msg";
  }

  static const char* value(const ::interface_sim::need_lists_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interface_sim::need_lists_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string person\n"
"string rob_emotion\n"
"string person_emotion\n"
"string name\n"
"float64 weight\n"
"string speech\n"
;
  }

  static const char* value(const ::interface_sim::need_lists_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interface_sim::need_lists_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.person);
      stream.next(m.rob_emotion);
      stream.next(m.person_emotion);
      stream.next(m.name);
      stream.next(m.weight);
      stream.next(m.speech);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct need_lists_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interface_sim::need_lists_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interface_sim::need_lists_msg_<ContainerAllocator>& v)
  {
    s << indent << "person: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.person);
    s << indent << "rob_emotion: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rob_emotion);
    s << indent << "person_emotion: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.person_emotion);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "weight: ";
    Printer<double>::stream(s, indent + "  ", v.weight);
    s << indent << "speech: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.speech);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERFACE_SIM_MESSAGE_NEED_LISTS_MSG_H
