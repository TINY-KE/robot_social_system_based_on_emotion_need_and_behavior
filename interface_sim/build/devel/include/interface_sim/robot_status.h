// Generated by gencpp from file interface_sim/robot_status.msg
// DO NOT EDIT!


#ifndef INTERFACE_SIM_MESSAGE_ROBOT_STATUS_H
#define INTERFACE_SIM_MESSAGE_ROBOT_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interface_sim
{
template <class ContainerAllocator>
struct robot_status_
{
  typedef robot_status_<ContainerAllocator> Type;

  robot_status_()
    : body1(0.0)
    , body2(0.0)
    , body3(0.0)
    , body4(0.0)
    , body5(0.0)
    , body6(0.0)
    , body7(0.0)
    , idleState(false)  {
    }
  robot_status_(const ContainerAllocator& _alloc)
    : body1(0.0)
    , body2(0.0)
    , body3(0.0)
    , body4(0.0)
    , body5(0.0)
    , body6(0.0)
    , body7(0.0)
    , idleState(false)  {
  (void)_alloc;
    }



   typedef double _body1_type;
  _body1_type body1;

   typedef double _body2_type;
  _body2_type body2;

   typedef double _body3_type;
  _body3_type body3;

   typedef double _body4_type;
  _body4_type body4;

   typedef double _body5_type;
  _body5_type body5;

   typedef double _body6_type;
  _body6_type body6;

   typedef double _body7_type;
  _body7_type body7;

   typedef uint8_t _idleState_type;
  _idleState_type idleState;





  typedef boost::shared_ptr< ::interface_sim::robot_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interface_sim::robot_status_<ContainerAllocator> const> ConstPtr;

}; // struct robot_status_

typedef ::interface_sim::robot_status_<std::allocator<void> > robot_status;

typedef boost::shared_ptr< ::interface_sim::robot_status > robot_statusPtr;
typedef boost::shared_ptr< ::interface_sim::robot_status const> robot_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interface_sim::robot_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interface_sim::robot_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace interface_sim

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'interface_sim': ['/home/zhjd/catkin_ws/src/interface_sim/msg'], 'roscpp': ['/opt/ros/kinetic/share/roscpp/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::interface_sim::robot_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interface_sim::robot_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interface_sim::robot_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interface_sim::robot_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interface_sim::robot_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interface_sim::robot_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interface_sim::robot_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f24a8e12bb39a74b5495d323c297d73";
  }

  static const char* value(const ::interface_sim::robot_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f24a8e12bb39a74ULL;
  static const uint64_t static_value2 = 0xb5495d323c297d73ULL;
};

template<class ContainerAllocator>
struct DataType< ::interface_sim::robot_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interface_sim/robot_status";
  }

  static const char* value(const ::interface_sim::robot_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interface_sim::robot_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 body1\n\
float64 body2\n\
float64 body3\n\
float64 body4\n\
float64 body5\n\
float64 body6\n\
float64 body7\n\
bool idleState\n\
";
  }

  static const char* value(const ::interface_sim::robot_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interface_sim::robot_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.body1);
      stream.next(m.body2);
      stream.next(m.body3);
      stream.next(m.body4);
      stream.next(m.body5);
      stream.next(m.body6);
      stream.next(m.body7);
      stream.next(m.idleState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interface_sim::robot_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interface_sim::robot_status_<ContainerAllocator>& v)
  {
    s << indent << "body1: ";
    Printer<double>::stream(s, indent + "  ", v.body1);
    s << indent << "body2: ";
    Printer<double>::stream(s, indent + "  ", v.body2);
    s << indent << "body3: ";
    Printer<double>::stream(s, indent + "  ", v.body3);
    s << indent << "body4: ";
    Printer<double>::stream(s, indent + "  ", v.body4);
    s << indent << "body5: ";
    Printer<double>::stream(s, indent + "  ", v.body5);
    s << indent << "body6: ";
    Printer<double>::stream(s, indent + "  ", v.body6);
    s << indent << "body7: ";
    Printer<double>::stream(s, indent + "  ", v.body7);
    s << indent << "idleState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.idleState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERFACE_SIM_MESSAGE_ROBOT_STATUS_H
