// Generated by gencpp from file interface_sim/robot_emotion.msg
// DO NOT EDIT!


#ifndef INTERFACE_SIM_MESSAGE_ROBOT_EMOTION_H
#define INTERFACE_SIM_MESSAGE_ROBOT_EMOTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interface_sim
{
template <class ContainerAllocator>
struct robot_emotion_
{
  typedef robot_emotion_<ContainerAllocator> Type;

  robot_emotion_()
    : emotion1(0.0)
    , emotion2(0.0)
    , emotion3(0.0)
    , emotion4(0.0)
    , emotion5(0.0)
    , emotion6(0.0)
    , emotion7(0.0)
    , emotion8(0.0)  {
    }
  robot_emotion_(const ContainerAllocator& _alloc)
    : emotion1(0.0)
    , emotion2(0.0)
    , emotion3(0.0)
    , emotion4(0.0)
    , emotion5(0.0)
    , emotion6(0.0)
    , emotion7(0.0)
    , emotion8(0.0)  {
  (void)_alloc;
    }



   typedef double _emotion1_type;
  _emotion1_type emotion1;

   typedef double _emotion2_type;
  _emotion2_type emotion2;

   typedef double _emotion3_type;
  _emotion3_type emotion3;

   typedef double _emotion4_type;
  _emotion4_type emotion4;

   typedef double _emotion5_type;
  _emotion5_type emotion5;

   typedef double _emotion6_type;
  _emotion6_type emotion6;

   typedef double _emotion7_type;
  _emotion7_type emotion7;

   typedef double _emotion8_type;
  _emotion8_type emotion8;





  typedef boost::shared_ptr< ::interface_sim::robot_emotion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interface_sim::robot_emotion_<ContainerAllocator> const> ConstPtr;

}; // struct robot_emotion_

typedef ::interface_sim::robot_emotion_<std::allocator<void> > robot_emotion;

typedef boost::shared_ptr< ::interface_sim::robot_emotion > robot_emotionPtr;
typedef boost::shared_ptr< ::interface_sim::robot_emotion const> robot_emotionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interface_sim::robot_emotion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interface_sim::robot_emotion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace interface_sim

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'interface_sim': ['/home/zhjd/catkin_ws/src/interface_sim/msg'], 'roscpp': ['/opt/ros/kinetic/share/roscpp/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::interface_sim::robot_emotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interface_sim::robot_emotion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interface_sim::robot_emotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interface_sim::robot_emotion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interface_sim::robot_emotion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interface_sim::robot_emotion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interface_sim::robot_emotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3fa29132f7142bca92b48823212b5e10";
  }

  static const char* value(const ::interface_sim::robot_emotion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3fa29132f7142bcaULL;
  static const uint64_t static_value2 = 0x92b48823212b5e10ULL;
};

template<class ContainerAllocator>
struct DataType< ::interface_sim::robot_emotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interface_sim/robot_emotion";
  }

  static const char* value(const ::interface_sim::robot_emotion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interface_sim::robot_emotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 emotion1\n\
float64 emotion2\n\
float64 emotion3\n\
float64 emotion4\n\
float64 emotion5\n\
float64 emotion6\n\
float64 emotion7\n\
float64 emotion8\n\
";
  }

  static const char* value(const ::interface_sim::robot_emotion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interface_sim::robot_emotion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.emotion1);
      stream.next(m.emotion2);
      stream.next(m.emotion3);
      stream.next(m.emotion4);
      stream.next(m.emotion5);
      stream.next(m.emotion6);
      stream.next(m.emotion7);
      stream.next(m.emotion8);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_emotion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interface_sim::robot_emotion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interface_sim::robot_emotion_<ContainerAllocator>& v)
  {
    s << indent << "emotion1: ";
    Printer<double>::stream(s, indent + "  ", v.emotion1);
    s << indent << "emotion2: ";
    Printer<double>::stream(s, indent + "  ", v.emotion2);
    s << indent << "emotion3: ";
    Printer<double>::stream(s, indent + "  ", v.emotion3);
    s << indent << "emotion4: ";
    Printer<double>::stream(s, indent + "  ", v.emotion4);
    s << indent << "emotion5: ";
    Printer<double>::stream(s, indent + "  ", v.emotion5);
    s << indent << "emotion6: ";
    Printer<double>::stream(s, indent + "  ", v.emotion6);
    s << indent << "emotion7: ";
    Printer<double>::stream(s, indent + "  ", v.emotion7);
    s << indent << "emotion8: ";
    Printer<double>::stream(s, indent + "  ", v.emotion8);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERFACE_SIM_MESSAGE_ROBOT_EMOTION_H
