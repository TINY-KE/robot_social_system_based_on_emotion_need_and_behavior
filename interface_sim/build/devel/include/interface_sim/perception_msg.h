// Generated by gencpp from file interface_sim/perception_msg.msg
// DO NOT EDIT!


#ifndef INTERFACE_SIM_MESSAGE_PERCEPTION_MSG_H
#define INTERFACE_SIM_MESSAGE_PERCEPTION_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interface_sim
{
template <class ContainerAllocator>
struct perception_msg_
{
  typedef perception_msg_<ContainerAllocator> Type;

  perception_msg_()
    : time(0.0)
    , person_name()
    , IDtype()
    , intention()
    , p(0.0)
    , speech()
    , person_emotion()  {
    }
  perception_msg_(const ContainerAllocator& _alloc)
    : time(0.0)
    , person_name(_alloc)
    , IDtype(_alloc)
    , intention(_alloc)
    , p(0.0)
    , speech(_alloc)
    , person_emotion(_alloc)  {
  (void)_alloc;
    }



   typedef double _time_type;
  _time_type time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _person_name_type;
  _person_name_type person_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _IDtype_type;
  _IDtype_type IDtype;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _intention_type;
  _intention_type intention;

   typedef double _p_type;
  _p_type p;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _speech_type;
  _speech_type speech;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _person_emotion_type;
  _person_emotion_type person_emotion;





  typedef boost::shared_ptr< ::interface_sim::perception_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interface_sim::perception_msg_<ContainerAllocator> const> ConstPtr;

}; // struct perception_msg_

typedef ::interface_sim::perception_msg_<std::allocator<void> > perception_msg;

typedef boost::shared_ptr< ::interface_sim::perception_msg > perception_msgPtr;
typedef boost::shared_ptr< ::interface_sim::perception_msg const> perception_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interface_sim::perception_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interface_sim::perception_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace interface_sim

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'interface_sim': ['/home/zhjd/catkin_ws/src/interface_sim/msg'], 'roscpp': ['/opt/ros/kinetic/share/roscpp/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::interface_sim::perception_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interface_sim::perception_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interface_sim::perception_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interface_sim::perception_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interface_sim::perception_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interface_sim::perception_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interface_sim::perception_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c6c78bdb9d238a06de9c10c3d3b3dce6";
  }

  static const char* value(const ::interface_sim::perception_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc6c78bdb9d238a06ULL;
  static const uint64_t static_value2 = 0xde9c10c3d3b3dce6ULL;
};

template<class ContainerAllocator>
struct DataType< ::interface_sim::perception_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interface_sim/perception_msg";
  }

  static const char* value(const ::interface_sim::perception_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interface_sim::perception_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time\n\
string person_name\n\
string IDtype\n\
string intention\n\
float64 p\n\
string speech\n\
string person_emotion\n\
";
  }

  static const char* value(const ::interface_sim::perception_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interface_sim::perception_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.person_name);
      stream.next(m.IDtype);
      stream.next(m.intention);
      stream.next(m.p);
      stream.next(m.speech);
      stream.next(m.person_emotion);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct perception_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interface_sim::perception_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interface_sim::perception_msg_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "person_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.person_name);
    s << indent << "IDtype: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.IDtype);
    s << indent << "intention: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.intention);
    s << indent << "p: ";
    Printer<double>::stream(s, indent + "  ", v.p);
    s << indent << "speech: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.speech);
    s << indent << "person_emotion: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.person_emotion);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERFACE_SIM_MESSAGE_PERCEPTION_MSG_H
