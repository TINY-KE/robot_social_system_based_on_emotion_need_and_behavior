# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from interface_sim/robot_emotion.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class robot_emotion(genpy.Message):
  _md5sum = "3fa29132f7142bca92b48823212b5e10"
  _type = "interface_sim/robot_emotion"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 emotion1
float64 emotion2
float64 emotion3
float64 emotion4
float64 emotion5
float64 emotion6
float64 emotion7
float64 emotion8"""
  __slots__ = ['emotion1','emotion2','emotion3','emotion4','emotion5','emotion6','emotion7','emotion8']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       emotion1,emotion2,emotion3,emotion4,emotion5,emotion6,emotion7,emotion8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(robot_emotion, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.emotion1 is None:
        self.emotion1 = 0.
      if self.emotion2 is None:
        self.emotion2 = 0.
      if self.emotion3 is None:
        self.emotion3 = 0.
      if self.emotion4 is None:
        self.emotion4 = 0.
      if self.emotion5 is None:
        self.emotion5 = 0.
      if self.emotion6 is None:
        self.emotion6 = 0.
      if self.emotion7 is None:
        self.emotion7 = 0.
      if self.emotion8 is None:
        self.emotion8 = 0.
    else:
      self.emotion1 = 0.
      self.emotion2 = 0.
      self.emotion3 = 0.
      self.emotion4 = 0.
      self.emotion5 = 0.
      self.emotion6 = 0.
      self.emotion7 = 0.
      self.emotion8 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.emotion1, _x.emotion2, _x.emotion3, _x.emotion4, _x.emotion5, _x.emotion6, _x.emotion7, _x.emotion8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.emotion1, _x.emotion2, _x.emotion3, _x.emotion4, _x.emotion5, _x.emotion6, _x.emotion7, _x.emotion8,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8d().pack(_x.emotion1, _x.emotion2, _x.emotion3, _x.emotion4, _x.emotion5, _x.emotion6, _x.emotion7, _x.emotion8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.emotion1, _x.emotion2, _x.emotion3, _x.emotion4, _x.emotion5, _x.emotion6, _x.emotion7, _x.emotion8,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
