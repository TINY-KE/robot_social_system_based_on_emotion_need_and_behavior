#!/usr/bin/env python
PACKAGE = "sim"
 
from dynamic_reconfigure.parameter_generator_catkin import *
 
gen = ParameterGenerator()
 
# gen.add("int_param", int_t, 0, "int parameter", 1, 0, 10);
# gen.add("double_param", double_t, 0, "double parameter", .1, 0.0, 1.0);
# gen.add("bool_param", bool_t, 0, "bool parameter", True);
# gen.add("str_param", str_t, 0, "string parameter", "test001");
 
# size_enum = gen.enum([ gen.const("Low",      int_t, 0, "Low is 0"),
#                        gen.const("Medium",     int_t, 1, "Medium is 1"),
#                        gen.const("High",      int_t, 2, "Hight is 2")],
#                      "Select from the list")
 
# gen.add("size", int_t, 0, "Select from the list", 1, 0, 3, edit_method=size_enum)
intention_enum = gen.enum([    gen.const("EnterSchool",      str_t, "EnterSchool", ""),                      
					        gen.const("Query",     str_t, "Query", "") ,
							gen.const("Uncooperate",     str_t, "Uncooperate", ""),
							gen.const("SendWord",     str_t, "SendWord", "")
							], 
					   "An enum to set intention")
emotion_enum = gen.enum([    gen.const("Happy",      str_t, "Happy", ""),                      
					        gen.const("Sad",     str_t, "Sad", ""),                      
					        gen.const("Angry",      str_t, "Angry", ""),                      
					        gen.const("Boring", str_t, "Boring", "")
							], 
					   "An enum to set emotion")

IDtype_enum = gen.enum([    gen.const("Teacher",      str_t, "Teacher", ""),                      
					        gen.const("Student",     str_t, "Student", ""),                      
					        gen.const("Parent",      str_t, "Parent", ""), 
							gen.const("Stranger",      str_t, "Stranger", "")
							],
							"An enum to set person ID")

person_name_enum = gen.enum([    
							gen.const("Teacher_Li",      str_t, "Teacher_Li", ""),
							gen.const("Hong",      str_t, "Hong", ""),
							gen.const("Ming",      str_t, "Ming", ""),                      
					        gen.const("Gang",     str_t, "Gang", ""),                      
					        gen.const("Dad_of_Hong",      str_t, "Dad_of_Hong", ""),                      
					        gen.const("Dad_of_Ming",      str_t, "Dad_of_Ming", ""),
							gen.const("Dad_of_Gang",      str_t, "Dad_of_Gang", ""),                					                              
					        gen.const("Headmaster",      str_t, "Headmaster", "") ,	
							gen.const("Stranger_",      str_t, "Stranger", "")
							], 					
					   "An enum to set person_name")

need_enum = gen.enum([    gen.const("Greet",      str_t, "Greet", ""),                      
					        gen.const("MeasureTempareture",     str_t, "MeasureTempareture", ""),                      
					        gen.const("Answer",      str_t, "Answer", ""),
							gen.const("ParentIdentity",      str_t, "ParentIdentity", ""),
							gen.const("KeepOrder", str_t, "KeepOrder", ""), 
							gen.const("StopStranger", str_t, "StopStranger", ""),
							gen.const("Wander",      str_t, "Wander", ""), 
							gen.const("Doubt ",      str_t, "Doubt", ""), 
							gen.const("Chat",      str_t, "Chat", ""),                       
					        gen.const("Charge", str_t, "Charge", "")  ,                       
					        gen.const("Remind", str_t, "Remind", "")
							], 
					   "An enum to set need")

gen.add("publish", bool_t, 0, "switch", False);
#percepiton
gen.add("per_switch", bool_t, 0, "switch", False);
gen.add("per_time", double_t, 0, "per_time", 0.0000, 0, 1000000000000);# float64 time_
gen.add("per_person_IDtype", str_t, 0, "per_person_IDtype", "Teacher",edit_method=IDtype_enum);# string person_
gen.add("per_person_name", str_t, 0, "per_person_name", "Teacher_Li",edit_method=person_name_enum);
gen.add("per_intention", str_t, 0, "per_intention", "EnterSchool",edit_method=intention_enum)# string intention_
gen.add("per_p", double_t, 0, "per_p", 0.9, 0, 1)# float64 p_
gen.add("per_speech", str_t, 0, "per_speech", "")# string speech_
gen.add("per_emotion", str_t, 0, "per_emotion", "Happy",edit_method=emotion_enum)# string person_emotion_  
#(internal) emotin model
gen.add("emotion_switch", bool_t, 0, "switch", False);
gen.add("emotion_1_happy", double_t, 0, "happy", 0.8, 0, 1)# float64 emotion1
gen.add("emotion_2_angry", double_t, 0, "angry", 0.1, 0, 1)# float64 emotion2
gen.add("emotion_3_sad", double_t, 0, "sad", 0.2, 0, 1)# float64 emotion3
gen.add("emotion_4_boring", double_t, 0, "boring", 0.3, 0, 1)# float64 emotion4
gen.add("emotion_5_", double_t, 0, "", 0, 0, 1)  # float64 emotion5
gen.add("emotion_6_", double_t, 0, "", 0, 0, 1)   # float64 emotion6
gen.add("emotion_7_", double_t, 0, "", 0, 0, 1)   # float64 emotion7
gen.add("emotion_8_", double_t, 0, "", 0, 0, 1)    # float64 emotion8
#(internal)   robot  body status
gen.add("body_switch", bool_t, 0, "switch", False);
gen.add("body_1_energy", double_t, 0, "energy", 1, 0, 1)# float64 body1
gen.add("body_2_gaze", double_t, 0, "gaze", 1, 0, 1)# float64 body2
gen.add("body_3_expression", double_t, 0, "expression", 1, 0, 1)# float64 body3
gen.add("body_4_body", double_t, 0, "body", 1, 0, 1)# float64 body4
gen.add("body_5_arm", double_t, 0, "arm", 1, 0, 1)# float64 body5
gen.add("body_6_leg", double_t, 0, "leg", 1, 0, 1)# float64 body6
gen.add("body_7_blank", double_t, 0, "blank", 1, 0, 1)# float64 body7
gen.add("body_idleState", bool_t, 0, "bool parameter", True);# bool atWork
#(internal)   robot  need
gen.add("need_switch", bool_t, 0, "switch", False);
gen.add("need_person_name", str_t, 0, "need_person", "Teacher_Li",edit_method=person_name_enum);# string person
gen.add("need_person_IDtype", str_t, 0, "need_person", "Teacher",edit_method=IDtype_enum);# string person
# gen.add("need_rob_emotion", str_t, 0, "need_rob_emotion", "Happy")# string rob_emotion
gen.add("need_rob_emotion", str_t, 0, "need_rob_emotion", "Happy",edit_method=emotion_enum)# string rob_emotion
gen.add("need_person_emotion", str_t, 0, "need_person_emotion", "Happy",edit_method=emotion_enum)# string person_emotion
gen.add("need_name", str_t, 0, "need_name", "Greet",edit_method=need_enum)# string name
gen.add("need_weight", double_t, 0, "need_weight", 0.9, 0, 1)# float64 weight
gen.add("need_speech", str_t, 0, "need_speech", "")# string speech
exit(gen.generate(PACKAGE, "sim", "sim"))
